// Approach 2 for creating class
// syntax
var className = function(optional arguments for constructor){
	// global variables/methods
	// private variables/methods
	
	this.
}

var Calculator = function(){

	var printToConsole = function(result){
		console.log('Result is ' + result);
	}
	
	this.version = 2.0;
	
	this.addition = function(x, y) {
		var z = x + y;
		printToConsole(z);
		return z;
	};
	this.subtraction = function(x, y) {
		var z = x - y;
		printToConsole(z);
		return z;
	}
}

function printWelcome(user){
	user = user || 'Admin'
	console.log('Welcome to ' + user);
}
// executing function
// approach 1
printWelcome(); -> Welcome to Admin
printWelcome('Rakesh'); -> Welcome to Rakesh

// approach 2
printWelcome.call() -> Welcome to Admin
printWelcome.call(this, 'Keerthi') -> Welcome to Keerthi

var ScientificCalculator = function(){
	Calculator.call(this);
	this.areaOfTriangle = function() {
	}
	// overriding function
	this.addition = function(x, y, z) {
		return x + y + z;
	}
}

// Advantages of approach 2
Supporting Inheritance

Assume Person is class and age is field
var obj = new Person();

if age is private -> obj.age -> throws exception or will not return value
if age is public -> obj.age
if age is static -> Person.age
if age is global -> age

prototype - It is used to inject methods to existing classes
Calculator.prototype.multiplication = function(x, y) {
	return x * y;
}

// below method injects contains method to Array class
Array.prototype.contains = function (element) {
  for (var i = 0; i < this.length; i++) {
      if (this[i] == element) {
          return true;
      }
  }
  
  return false;
};

ES6 Samples

class Calculator 
{
	addition(x, y){
		x = x || 0;
		y = y || 0;
    	var z = x + y;
		return z;
	}
	
	subtraction(x, y){
		x = x || 0;
		y = y || 0;
		var z = x - y;
		return z;
	}
}


class MalePerson{
	static gender(){
    	return "M";
	}
}

MalePerson.gender();

class Father {
	getGender(){
    	return "M";
	}
	getName(){
    	return "Venkat";
	}
}

class Son extends Father
{
	getName(){
    	return "Rakesh";
	}
	getAge(){
    	return 20;
	}
}

const a = 10;
a =20; => throws exception.

https://babeljs.io/learn-es2015/